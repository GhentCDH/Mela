version: "3.9"

services:

  backend:
    image: $BACKEND_HOSTNAME
    container_name: $BACKEND_HOSTNAME
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2G"
    build:
      context: backend
      target: prd
    depends_on:
      authentication: 
          condition: service_healthy
    ports:
      - "127.0.0.1:${BACKEND_EXTERNAL_TCP_PORT}:${BACKEND_INTERNAL_TCP_PORT}"
    volumes:
      - ./backend:/app
      - $STORE_DIR/backend/homedir:/root
    environment:
      BACKEND_DB_CONNECTION_STRING: "postgresql+asyncpg://${DATABASE_APP_USERNAME}:${DATABASE_APP_PASSWORD}@${DATABASE_APP_HOST}/${DATABASE_APP_DBNAME}"
      BACKEND_DB_TEST_CONNECTION_STRING: "postgresql+asyncpg://${DATABASE_TEST_USERNAME}:${DATABASE_TEST_PASSWORD}@${DATABASE_TEST_HOST}/${DATABASE_TEST_DBNAME}"
      BACKEND_KEYCLOAK_ISSUER: $BACKEND_KEYCLOAK_ISSUER
      BACKEND_KEYCLOAK_CLIENT_ID: $KEYCLOAK_CLIENT_ID
      BACKEND_KEYCLOAK_REALM: $KEYCLOAK_REALM
      BACKEND_KEYCLOAK_CLIENT_SECRET: $KEYCLOAK_CLIENT_SECRET
    command: $BACKEND_COMMAND

  frontend:
    image: ${FRONTEND_HOSTNAME}.prd
    container_name: ${FRONTEND_HOSTNAME}.prd
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2G"
    build:
      context: frontend
      target: prd
    ports:
      - "127.0.0.1:${FRONTEND_EXTERNAL_TCP_PORT}:${FRONTEND_INTERNAL_TCP_PORT}"      
    environment:
      FRONTEND_BACKEND_SCHEMA_URL: "http://${BACKEND_HOSTNAME}:${BACKEND_INTERNAL_TCP_PORT}/schema/**" # For nuxt reverse proxy
      FRONTEND_BACKEND_API_URL: "http://${BACKEND_HOSTNAME}:${BACKEND_INTERNAL_TCP_PORT}/api/**" # For nuxt reverse proxy
      AUTH_ORIGIN: $FRONTEND_AUTH_ORIGIN
      NUXT_AUTH_SECRET: $FRONTEND_NEXT_AUTH_SECRET
      FRONTEND_KEYCLOAK_CLIENT_ID: $KEYCLOAK_CLIENT_ID
      FRONTEND_KEYCLOAK_CLIENT_SECRET: $KEYCLOAK_CLIENT_SECRET
      FRONTEND_KEYCLOAK_ISSUER: $FRONTEND_KEYCLOAK_ISSUER
    command: bash -c "node .output/server/index.mjs" ]

  authentication:
    image: keycloak/keycloak:24.0.2
    container_name: $KEYCLOAK_HOSTNAME
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2G"
    depends_on:
      database_auth: 
        condition: service_healthy
    ports:
      - "127.0.0.1:${KEYCLOAK_EXTERNAL_TCP_PORT}:${KEYCLOAK_INTERNAL_TCP_PORT}"
    healthcheck:
      # since keycloak does not have wget or curl, we need to use java to check the health, from here, thanks @sarath-soman https://gist.github.com/sarath-soman/5d9aec06953bbd0990c648605d4dba07
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/health/live']
      retries: 3
    environment:
      - KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN_USERNAME
      - KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://$DATABASE_AUTH_HOST/$DATABASE_AUTH_DBNAME
      - KC_DB_USERNAME=$DATABASE_AUTH_USERNAME
      - KC_DB_PASSWORD=$DATABASE_AUTH_PASSWORD
      - KC_HEALTH_ENABLED=true # enable health check at /health/live
    command: start-dev
  
  database_app:
    image: postgres:16.2-bookworm
    container_name: $DATABASE_APP_HOST
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "256M"
    healthcheck:
      test:
        - CMD
        - pg_isready 
        - --dbname=$DATABASE_APP_DBNAME
        - --username=$DATABASE_APP_USERNAME
      retries: 3
    ports:
      - "127.0.0.1:${DATABASE_APP_EXTERNAL_TCP_PORT}:${DATABASE_APP_INTERNAL_TCP_PORT}"
    volumes:
      - $STORE_DIR/data/app:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DATABASE_APP_USERNAME
      POSTGRES_PASSWORD: $DATABASE_APP_PASSWORD
      POSTGRES_DB: $DATABASE_APP_DBNAME

  database_test:
    image: postgres:16.2-bookworm
    container_name: $DATABASE_TEST_HOST
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "256M"
    healthcheck:
      test:
        - CMD
        - pg_isready 
        - --username=$DATABASE_TEST_USERNAME
        - --dbname=$DATABASE_TEST_DBNAME
      retries: 3
    volumes:
      - $STORE_DIR/data/test:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DATABASE_TEST_USERNAME
      POSTGRES_PASSWORD: $DATABASE_TEST_PASSWORD
      POSTGRES_DB: $DATABASE_TEST_DBNAME

  database_auth:
    image: postgres:16.2-bookworm
    container_name: $DATABASE_AUTH_HOST
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "256M"
    healthcheck:
      test:
        - CMD
        - pg_isready 
        - --username=$DATABASE_AUTH_USERNAME
        - --dbname=$DATABASE_AUTH_DBNAME
      retries: 3
    volumes:
      -  $STORE_DIR/data/auth:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DATABASE_AUTH_USERNAME
      POSTGRES_PASSWORD: $DATABASE_AUTH_PASSWORD
      POSTGRES_DB: $DATABASE_AUTH_DBNAME
