generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../generated/types"
  addInputTypeValidation           = "false"
  createInputTypes                 = "false"
  createModelTypes                 = "true"
  createOptionalDefaultValuesTypes = "false"
  createRelationValuesTypes        = "true"
  useMultipleFiles                 = "true"
  writeBarrelFiles                 = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_APP_URL")
}

model Author {
  id   String @id @default(uuid())
  name String @unique
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  book Book[]
  @@map("author")
}

model Book{
  id          String        @id @default(uuid())
  name        String
  author_id   String
  author      Author        @relation(fields: [author_id], references: [id])
  year        Int
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  chapter Chapter[]
  @@map("book")
}

model Chapter {
  id          String        @id @default(uuid())
  chapter_number        String?
  chapter_order Int?
  name        String
  book_id     String
  book        Book          @relation(fields: [book_id], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  text Text[]
  @@map("chapter")
}

model Text {
  id          String        @id @default(uuid())
  annotations Annotation[]
  textContent TextContent[]
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  chapter_id String
  chapter Chapter @relation(fields: [chapter_id], references: [id])
  @@map("text")
}

model TextContent {
  id        String    @id @default(uuid())
  text_id   String
  text_type TextType
  language  String
  content   String
  Example   Example[]
  text      Text      @relation(fields: [text_id], references: [id], onDelete: Cascade)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("text_content")
}

model Annotation {
  id               String             @id @default(uuid())
  motivation       MotivationEnum
  text_id          String
  text             Text               @relation(fields: [text_id], references: [id])
  annotationBody   AnnotationBody[]
  annotationTarget AnnotationTarget[]
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("annotation")
}

model AnnotationBody {
  id            String          @id @default(uuid())
  value         Json
  annotation_id String
  source_type   AnnotationType?
  source_id     String?
  annotation    Annotation      @relation(fields: [annotation_id], references: [id], onDelete: Cascade)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("annotation_body")
}

model AnnotationTarget {
  id            String         @id @default(uuid())
  value         Json
  annotation_id String
  source_type   AnnotationType
  source_id     String
  annotation    Annotation     @relation(fields: [annotation_id], references: [id], onDelete: Cascade)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("annotation_target")
}

model Example {
  id              String      @id @default(uuid())
  name            String
  register_id     String
  text_content_id String
  register        Register    @relation(fields: [register_id], references: [id])
  textContent     TextContent @relation(fields: [text_content_id], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())
  lemmas Lemma[] @relation("example_lemma")

  @@map("example")
}

model Register {
  id       String    @id @default(uuid())
  name     String    @unique
  examples Example[]
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("register")
}

model Speech {
  id   String @id @default(uuid())
  name String @unique
  lemma Lemma[]
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())

  @@map("speech")
}

model Lemma {
  id          String   @id @default(uuid())
  word        String   @unique
  link        String
  grammatical Boolean? @default(false)
  comparative Boolean? @default(false)
  superlative Boolean? @default(false)
  participle  Boolean? @default(false)
  speech_id   String
  speech      Speech   @relation(fields: [speech_id], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt @default(now())
  examples Example[] @relation("example_lemma")

  @@map("lemma")
}

enum TextType {
  SOURCE
  TRANSLATION
}

enum MotivationEnum {
  classifying
  tagging
}

enum AnnotationType {
  text_content
  annotation
  example
  lemma
}
