// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma-client/"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../generated/types"
  createInputTypes                 = "false"
  addInputTypeValidation           = "false"
  writeBarrelFiles                 = "true"
  createOptionalDefaultValuesTypes = "false"
  createRelationValuesTypes        = "true"
  useMultipleFiles                 = "true"
  createModelTypes                 = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_APP_URL")
}

model Author {
  id   String @id @default(uuid())
  name String @unique
  Text Text[]
}

model Text {
  id          String        @id @default(uuid())
  name        String
  author      Author        @relation(fields: [author_id], references: [id])
  author_id   String
  year        Int
  textContent TextContent[]
  annotations Annotation[]
}

enum TextType {
  SOURCE
  TRANSLATION
}

model TextContent {
  id               String             @id @default(uuid())
  text             Text               @relation(fields: [text_id], references: [id], onDelete: Cascade)
  text_id          String
  text_type        TextType
  language         String
  content          String             @db.Text
}

enum MotivationEnum {
  classifying
  tagging
}

model Annotation {
  id               String             @id @default(uuid())
  body             Json
  target           Json
  motivation       MotivationEnum
  text             Text               @relation(fields: [text_id], references: [id])
  text_id          String
  annotationBody   AnnotationBody[]
  annotationTarget AnnotationTarget[]
}

enum AnnotationType {
  text_content
  annotation
  example
}

model AnnotationBody {
  id            String       @id @default(uuid())
  value         Json
  annotation    Annotation   @relation(fields: [annotation_id], references: [id], onDelete: Cascade)
  annotation_id String
  // TextContent        TextContent? @relation(fields: [text_content_id], references: [id])
  // text_content_id     String?
  // example       Example?     @relation(fields: [example_id], references: [id], onDelete: Cascade)
  // example_id    String?
}

model AnnotationTarget {
  id            String       @id @default(uuid())
  value         Json
  annotation    Annotation   @relation(fields: [annotation_id], references: [id], onDelete: Cascade)
  annotation_id String
  source_type AnnotationType
  source_id String
  // TextContent        TextContent? @relation(fields: [text_content_id], references: [id])
  // text_content_id     String
}

model Example {
  id             String           @id @default(uuid())
  name           String
  register       Register         @relation(fields: [register_id], references: [id])
  register_id    String
  // Lema Lema[]
}

model Register {
  id       String    @id @default(uuid())
  name     String    @unique
  examples Example[]
}

model Speech {
  id   String @id @default(uuid())
  name String @unique
  Lema Lema[]
}

model Lema {
  id          String   @id @default(uuid())
  word        String   @unique
  link        String
  grammatical Boolean? @default(false)
  comparative Boolean? @default(false)
  superlative Boolean? @default(false)
  participle  Boolean? @default(false)
  speech      Speech   @relation(fields: [speech_id], references: [id])
  speech_id   String
}
